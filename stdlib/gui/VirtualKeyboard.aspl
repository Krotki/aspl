import graphics
import math.geometry

[public]
class VirtualKeyboard extends Control {

    [public]
	property Font font
    [public]
	property Color textColor
    [public]
	property Color backgroundColor
    [public]
	property Color buttonColor
    [public]
	property Color borderColor
    [public]
	property Color keyDownColor
    [public]
	property list<list<string>> keys = [
        ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "+"],
        ["q", "w", "e", "r", "t", "y", "u", "i", "o", "p", "-"],
        ["a", "s", "d", "f", "g", "h", "j", "k", "l", "*", "/"],
        ["z", "x", "c", "v", "b", "n", "m", "(", ")", ".", "%"],
        ["[C]", "_", "!", "^", "?", ":", "___", "<--", "<-", "->"]
    ] // TODO: Change this

    [public]
	property callback<string> onKeyPress = callback(string key){}

    [readpublic]
	property map<string, Rectangle> keyBounds
    [readpublic]
	property list<string> keysDown
    property bool capsEnabled

    [public]
	property Rectangle bounds{
        get{
            var yOffset = 0
            var maxXOffset = 0
            var i = 0
            foreach(keys as row){
                var maxHeight = 0
                var xOffset = 0
                var j = 0
                foreach(row as key){
                    var size = graphics.measure_text_size(key, font)
                    if(!(key == "<--" || key == "<-" || key == "->" || key == "___")){
                        size = graphics.measure_text_size("m", font)   
                    }
                    if(j == row.length - 1){         
                        xOffset += int(size.width * 2)
                    }else{
                        xOffset += int(size.width * 2.5)
                    }
                    if(size.height > maxHeight){
                        maxHeight = int(size.height)
                    }
                    j++
                }
                if(i == keys.length - 1){
                    yOffset += int(maxHeight * 2)
                }else{
                    yOffset += int(maxHeight * 2.5)
                }
                if(xOffset > maxXOffset){
                    maxXOffset = xOffset
                }
                i++
            }
            return new Rectangle(position, new Size(float(maxXOffset), float(yOffset)))
        }
    }

    [public]
    method construct(Point position, Font font, Color? textColor = null, Color? backgroundColor = null, Color? borderColor = null, Color? keyDownColor = null) {
        this.position = position
        this.font = font
        if(textColor == null) {
            this.textColor = new Color(255, 0, 0, 0)
        } else {
            this.textColor = textColor
        }
        if(backgroundColor == null) {
            this.backgroundColor = new Color(255, 255, 255, 255)
        } else {
            this.backgroundColor = backgroundColor
        }
        this.buttonColor = new Color(255, 250, 250, 250)
        if(borderColor == null) {
            this.borderColor = new Color(255, 0, 0, 0)
        } else {
            this.borderColor = borderColor
        }
        if(keyDownColor == null) {
            this.keyDownColor = new Color(255, 230, 230, 230)
        } else {
            this.keyDownColor = keyDownColor
        }
    }

    [public]
	method draw(Canvas canvas){
        canvas.fillRectangle(bounds, backgroundColor)
        canvas.drawRectangle(bounds, borderColor)
        var yOffset = 0
        foreach(keys as row){
            var maxHeight = 0
            var xOffset = 0
            foreach(row as key){
                var displayKey = key
                if(capsEnabled){
                    displayKey = key.toUpper()
                }
                var size = graphics.measure_text_size(displayKey, font)
                if(!(key == "<--" || key == "<-" || key == "->" || key == "___")){
                    size = graphics.measure_text_size("m", font)   
                }
                var bounds = new Rectangle(new Point(position.x + xOffset, position.y + yOffset), new Size(size.width * 2, size.height * 2))

                if(keysDown.contains(displayKey)){
                    canvas.fillRectangle(bounds, keyDownColor)
                }else{
                    canvas.fillRectangle(bounds, buttonColor)
                }
                canvas.drawText(displayKey, int(position.x + xOffset + size.width / 2), int(position.y + yOffset + size.height / 2), font, textColor, HorizontalAlignment.Left, VerticalAlignment.Top)
                keyBounds[key] = bounds
                canvas.drawRectangle(bounds, borderColor)
                
                xOffset += int(size.width * 2.5)
                if(size.height > maxHeight){
                    maxHeight = int(size.height)
                }
            }
            yOffset += int(maxHeight * 2.5)
        }
    }

    [public]
	method onMouseDown(Point position, MouseButton button){
        hasFocus = true
        foreach(keyBounds as key => bounds){
            if(bounds.containsPoint(position)){
                keysDown.add(key)
            }
        }
    }

    [public]
	method onMouseUp(Point position, MouseButton button){
        foreach(keyBounds as key => bounds){
            if(keysDown.contains(key)){
                keysDown.remove(key)
                var string? k = key
                if(k == "<--"){
                    // TODO: k = "\b"
                }elseif(k == "<-"){
                    // TODO
                }elseif(k == "->"){
                    // TODO
                }elseif(k == "___"){
                    k = " "
                }elseif(k == "[C]"){
                    capsEnabled = !capsEnabled
                    k = null
                }
                if(k != null){
                    if(capsEnabled){
                        k = k?!.toUpper()
                    }
                    onKeyPress.(k)
                }
            }
        }
    }

    [public]
	method onTouchDown(list<TouchPoint> points){
        foreach(points as point){
            if(point.changed && bounds.containsPoint(point.position)){
                foreach(keyBounds as key => bounds){
                    if(bounds.containsPoint(point.position)){
                        keysDown.add(key)
                    }
                }
            }
        }
    }

    [public]
	method onTouchUp(list<TouchPoint> points){
        foreach(keyBounds as key => bounds){
            if(keysDown.contains(key)){
                keysDown.remove(key)
                var string? k = key
                if(k == "<--"){
                    // TODO: k = "\b"
                }elseif(k == "<-"){
                    // TODO
                }elseif(k == "->"){
                    // TODO
                }elseif(k == "___"){
                    k = " "
                }elseif(k == "[C]"){
                    capsEnabled = !capsEnabled
                    k = null
                }
                if(k != null){
                    if(capsEnabled){
                        k = k?!.toUpper()
                    }
                    onKeyPress.(k)
                }
            }
        }
    }

}