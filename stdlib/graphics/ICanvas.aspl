import math.geometry

[public]
[abstract]
class ICanvas {

    [readpublic]
    property int width
    [readpublic]
	property int height

    [public]
	[abstract]
    method getPixel(int x, int y) returns Color

    [public]
	[abstract]
    method setPixel(int x, int y, Color color, bool blend = true)

    [public]
	[abstract]
    method fill(Color color, bool blend = true)

    [public]
	[abstract]
    method drawImage(Canvas image, int x, int y, bool blend = true)

    [public]
	[abstract]
	method drawLine(int x1, int y1, int x2, int y2, Color color, int thickness = 1, bool blend = true, bool antialias = true)

    [public]
	[abstract]
	method drawRectangle(Rectangle rectangle, Color color, bool blend = true)

    [public]
	[abstract]
	method fillRectangle(Rectangle rectangle, Color color, bool blend = true)

    [public]
	[abstract]
	method drawCircle(Ellipse circle, Color color, bool blend = true)

    [public]
	[abstract]
	method fillCircle(Ellipse circle, Color color, bool blend = true)

    [public]
	[abstract]
	method drawText(string text, int x, int y, Font font, Color color, HorizontalAlignment horizontalAlignment = HorizontalAlignment.Left, VerticalAlignment verticalAlignment = VerticalAlignment.Bottom, bool blend = true)

    [public]
	[abstract]
	method replaceColor(Color from, Color to, bool blend = true)

    [public]
	[abstract]
    // replaceColorIgnoreAlpha works like replaceColor, but checks only the R, G and B components and leaves the alpha value unchanged
	method replaceColorIgnoreAlpha(Color from, Color to)

	[public]
	[abstract]
	method blur(int radius)

    [public]
	[abstract]
	method resize(int width, int height)

    [public]
	[abstract]
	method resizeScale(float scale)

    [public]
	[abstract]
	method extendTo(int width, int height)

    [public]
	[abstract]
	method getSubImage(int x, int y, int width, int height) returns Canvas

    [public]
	[abstract]
	method copy() returns Canvas

    [public]
	[abstract]
	method save(string path)

}