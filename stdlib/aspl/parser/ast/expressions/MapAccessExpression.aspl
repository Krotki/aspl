import aspl.parser.ast
import aspl.parser.utils

[public]
class MapAccessExpression extends Expression {

    [readpublic]
    property Expression base
    [readpublic]
    property Expression key

    [public]
    method construct(Expression base, Expression key, Location? location){
        parent(Node).construct(location)
        this.base = base
        this.key = key
    }

    [public]
    method getType() returns Types{
        var list<Type> types = []
        foreach(base.getType().types as type){
            if(Type:getGenericTypes(type.toString()).length > 1){
                foreach(Type:getGenericTypes(type.toString())[1].types as t){
                    types.add(t)
                }
            }
        }
        return new Types(types)
    }

    [public]
    method isConstant() returns bool{
        return this.base.isConstant() && this.key.isConstant()
    }

    [public]
    method getConstantValue() returns any{
        return map<any, any>(this.base.getConstantValue())[this.key.getConstantValue()]
    }

}