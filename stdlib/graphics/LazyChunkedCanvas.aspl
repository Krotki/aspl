import math.geometry

[public]
class LazyChunkedCanvas extends ICanvas{

	property any handle = null
	[readpublic]
	property int width
	[readpublic]
	property int height
	[readpublic]
	property string directory

	// TODO: Use implementation calls to gather the below information
	[readpublic]
	[static]
	property int CHUNK_WIDTH = 256
	[readpublic]
	[static]
	property int CHUNK_HEIGHT = 256
	
	[public]
	method construct(int width, int height, string directory, any handle = null){
		this.width = width
		this.height = height
		this.directory = directory
		if(handle == null){
			this.handle = implement("graphics.canvas.lazy_chunked.new_from_size", width, height, 4, directory)
		}else{
			this.handle = handle
		}
	}
	
	[public]
	method getPixel(int x, int y) returns Color{
		var color = list<byte>(implement("graphics.canvas.lazy_chunked.get_pixel", handle, x, y))
		return new Color(color[0], color[1], color[2], color[3])
	}
	
	[public]
	method setPixel(int x, int y, Color color, bool blend = true){
		implement("graphics.canvas.lazy_chunked.set_pixel", handle, x, y, color.a, color.r, color.g, color.b, blend)
	}
	
	[public]
	method fill(Color color, bool blend = true){
		implement("graphics.canvas.lazy_chunked.fill", handle, color.a, color.r, color.g, color.b, blend)
	}

	[public]
	method drawImage(Canvas image, int x, int y, bool blend = true){
		implement("graphics.canvas.lazy_chunked.draw_image", handle, image.getInternalHandle(), x, y, blend)
	}

	[public]
	method drawLine(int x1, int y1, int x2, int y2, Color color, int thickness = 1, bool blend = true, bool antialias = true){
		implement("graphics.canvas.lazy_chunked.draw_line", handle, x1, y1, x2, y2, color.a, color.r, color.g, color.b, thickness, blend, antialias)
	}

	[public]
	method drawRectangle(Rectangle rectangle, Color color, bool blend = true){
		implement("graphics.canvas.lazy_chunked.draw_rectangle", handle, int(Point(rectangle.position).x), int(Point(rectangle.position).y), int(Point(rectangle.position).x) + int(Size(rectangle.size).width), int(Point(rectangle.position).y) + int(Size(rectangle.size).height), color.a, color.r, color.g, color.b, blend)
	}

	[public]
	method fillRectangle(Rectangle rectangle, Color color, bool blend = true){
		implement("graphics.canvas.lazy_chunked.fill_rectangle", handle, int(Point(rectangle.position).x), int(Point(rectangle.position).y), int(Point(rectangle.position).x) + int(Size(rectangle.size).width), int(Point(rectangle.position).y) + int(Size(rectangle.size).height), color.a, color.r, color.g, color.b, blend)
	}

	[public]
	method drawCircle(Ellipse circle, Color color, bool blend = true){
		implement("graphics.canvas.lazy_chunked.draw_circle", handle, int(Point(circle.position).x), int(Point(circle.position).y), int(Size(circle.size).width), color.a, color.r, color.g, color.b, blend)
	}
	
	[public]
	method fillCircle(Ellipse circle, Color color, bool blend = true){
		implement("graphics.canvas.lazy_chunked.fill_circle", handle, int(Point(circle.position).x), int(Point(circle.position).y), int(Size(circle.size).width), color.a, color.r, color.g, color.b, blend)
	}

	[public]
	method drawText(string text, int x, int y, Font font, Color color, HorizontalAlignment horizontalAlignment = HorizontalAlignment.Left, VerticalAlignment verticalAlignment = VerticalAlignment.Bottom, bool blend = true){
		implement("graphics.canvas.lazy_chunked.draw_text", handle, text, x, y, font.path, font.size, color.a, color.r, color.g, color.b, int(horizontalAlignment), int(verticalAlignment), blend)
	}

	[public]
	method replaceColor(Color from, Color to, bool blend = true){
		implement("graphics.canvas.lazy_chunked.replace_color", handle, from.a, from.r, from.g, from.b, to.a, to.r, to.g, to.b, blend)
	}

	// replaceColorIgnoreAlpha works like replaceColor, but checks only the R, G and B components and leaves the alpha value unchanged
	[public]
	method replaceColorIgnoreAlpha(Color from, Color to){
		implement("graphics.canvas.lazy_chunked.replace_color_ignore_alpha", handle, from.r, from.g, from.b, to.r, to.g, to.b)
	}

	[public]
	method blur(int radius){
		implement("graphics.canvas.lazy_chunked.blur", handle, radius)
	}

	[public]
	method resize(int width, int height){
		implement("graphics.canvas.lazy_chunked.resize_with_size", handle, width, height)
		this.width = width
		this.height = height
	}

	[public]
	method resizeScale(float scale){
		implement("graphics.canvas.lazy_chunked.resize_with_scale", handle, scale)
		this.width = int(this.width * scale)
		this.height = int(this.height * scale)
	}

	[public]
	method extendTo(int width, int height){
		implement("graphics.canvas.lazy_chunked.extend_to", handle, width, height)
		this.width = width
		this.height = height
	}

	[public]
	method getSubImage(int x, int y, int width, int height) returns Canvas{
		return new Canvas(width, height, implement("graphics.canvas.lazy_chunked.get_sub_image", this.handle, x, y, width, height))
	}

	[public]
	method copy() returns LazyChunkedCanvas{
		return new LazyChunkedCanvas(width, height, directory, implement("graphics.canvas.lazy_chunked.copy", this.handle))
	}

	[public]
	method requireArea(int x, int y, int width, int height){
		implement("graphics.canvas.lazy_chunked.require_area", this.handle, x, y, width, height)
	}

	[public]
	method isChunkLoaded(int x, int y) returns bool{
		return bool(implement("graphics.canvas.lazy_chunked.is_chunk_loaded", this.handle, x, y))
	}

	[public]
	method loadChunk(int x, int y){
		implement("graphics.canvas.lazy_chunked.load_chunk", this.handle, x, y)
	}

	[public]
	method unloadChunk(int x, int y){
		implement("graphics.canvas.lazy_chunked.unload_chunk", this.handle, x, y)
	}

	[public]
	method save(string path){
		implement("graphics.canvas.lazy_chunked.save_to_file", this.handle, path)
	}

	[public]
	[static]
	method fromFile(string file, string directory) returns LazyChunkedCanvas{
		var handle = implement("graphics.canvas.lazy_chunked.load_from_file", file, directory)
		return new LazyChunkedCanvas(int(implement("graphics.canvas.get_width", handle)), int(implement("graphics.canvas.get_height", handle)), directory, handle)
	}
	
}