import graphics
import math.geometry

// TODO: This implementation currently resizes to the required size and the padding is outside of the expected bounds (see the bounds property for the correct bounds)
[public]
class SingleLineTextBox extends Control {
    
    [public]
	property string text
    [public]
	property Font font
    [public]
	property int caret
    [public]
	property Color textColor
    [public]
	property Color backgroundColor
    [public]
	property Color borderColor
    [public]
    property HorizontalAlignment horizontalAlignment
    [public]
    property VerticalAlignment verticalAlignment
    [public]
	property bool useCustomVirtualKeyboard
    [readpublic]
	property VirtualKeyboard? virtualKeyboard

    [public]
	property Rectangle bounds{
        get{
            var size = graphics.measure_text_size(text, font)
            var startX = position.x
            if(horizontalAlignment == HorizontalAlignment.Center){
                startX -= size.width / 2f
            }elseif(horizontalAlignment == HorizontalAlignment.Right){
                startX -= size.width
            }
            var width = size.width
            var startY = position.y
            if(verticalAlignment == VerticalAlignment.Center){
                startY -= size.height / 2f
            }elseif(verticalAlignment == VerticalAlignment.Bottom){
                startY -= size.height
            }
            var height = size.height
            $if relativePadding{
                var XPADDING = 0.1
                var YPADDING = 0.1
                startX -= size.width * XPADDING
                width += size.width * XPADDING * 3 // TODO: Why * 3?
                startY -= size.height * YPADDING
                height += size.height * YPADDING * 2
            }$else{
                var XPADDING = 3f
                var YPADDING = 3f
                startX -= XPADDING
                width += XPADDING * 2
                startY -= YPADDING
                height += YPADDING * 2
            }
            return new Rectangle(new Point(startX, startY), new Size(width, height))
        }
    }

    [public]
	property int blinkInterval = 30 // in frames
	property int blinkCounter = 0
    [public]
	property bool blinkState = false

    property bool lastKeyWasGraveAccent = false

    // TODO: Add support for selections

    [public]
    method construct(Point position, string text, Font font, int caret = 0, Color? textColor = null, Color? backgroundColor = null, Color? borderColor = null, HorizontalAlignment? horizontalAlignment = null, VerticalAlignment? verticalAlignment = null, bool useCustomVirtualKeyboard = false) {
        this.position = position
        this.text = text
        this.font = font
        this.caret = caret
        if(textColor == null) {
            this.textColor = new Color(255, 0, 0, 0)
        } else {
            this.textColor = textColor
        }
        if(backgroundColor == null) {
            this.backgroundColor = new Color(255, 255, 255, 255)
        } else {
            this.backgroundColor = backgroundColor
        }
        if(borderColor == null) {
            this.borderColor = new Color(255, 0, 0, 0)
        } else {
            this.borderColor = borderColor
        }
        if(horizontalAlignment == null) {
            this.horizontalAlignment = HorizontalAlignment.Left
        } else {
            this.horizontalAlignment = horizontalAlignment
        }
        if(verticalAlignment == null) {
            this.verticalAlignment = VerticalAlignment.Top
        } else {
            this.verticalAlignment = verticalAlignment
        }
        this.useCustomVirtualKeyboard = useCustomVirtualKeyboard
        if(useCustomVirtualKeyboard){
            virtualKeyboard = new VirtualKeyboard(new Point(0, 0), font)
            VirtualKeyboard(virtualKeyboard).onKeyPress = callback(string key){
                if(key == "<--"){
                    backspace(1)
                }elseif(key == "<-"){
                    if(this.caret > 0){
                        this.caret--
                    }
                }elseif(key == "->"){
                    if(this.caret < text.length){
                        this.caret++
                    }
                }else{
                    insert(key)
                }
            }
        }
    }

    [public]
	method draw(Canvas canvas){
        canvas.fillRectangle(bounds, backgroundColor)
        canvas.drawRectangle(bounds, borderColor)
        var size = graphics.measure_text_size(text, font)
        canvas.drawText(text, int(position.x), int(position.y + size.height), font, textColor, horizontalAlignment, verticalAlignment)
        if(hasFocus){
            blinkCounter++
            if(blinkCounter >= blinkInterval){
                blinkCounter = 0
                blinkState = !blinkState
            }
            if(blinkState){
                var before = text
                if(caret < text.length){
                    before = text.before(caret)
                }
                var caretPosition = graphics.measure_text_size(before, font)
                var caretPositionWidth = caretPosition.width
                if(horizontalAlignment == HorizontalAlignment.Center){
                    caretPositionWidth -= size.width / 2f
                }elseif(horizontalAlignment == HorizontalAlignment.Right){
                    caretPositionWidth -= size.width
                }
                var caretPositionHeight = position.y
                if(verticalAlignment == VerticalAlignment.Center){
                    caretPositionHeight -= size.height / 2f
                }elseif(verticalAlignment == VerticalAlignment.Bottom){
                    caretPositionHeight -= size.height
                }
                canvas.drawLine(int(position.x + caretPositionWidth), int(caretPositionHeight), int(position.x + caretPositionWidth), int(caretPositionHeight + size.height), textColor)
            }
        }

        if(useCustomVirtualKeyboard && hasFocus){
            var bounds = VirtualKeyboard(virtualKeyboard).bounds
            VirtualKeyboard(virtualKeyboard).position = new Point(canvas.width / 2f - bounds.size.width / 2f, canvas.height * 0.75f - bounds.size.height / 2f)
            VirtualKeyboard(virtualKeyboard).draw(canvas)
        }
    }

    [public]
	method insert(string text){
        var before = this.text
        if(caret < this.text.length){
            before = this.text.before(caret)
        }
        var after = ""
        if(caret < this.text.length){
            after = this.text.after(caret - 1)
        }
        this.text = before + text + after
        caret += text.length
    }

    [public]
	method backspace(int amount){
        if(caret > 0){
            this.text = this.text.before(caret - amount) + this.text.after(caret - 1)
            caret -= amount
        }
    }

    [public]
	method onMouseDownAny(Point position, MouseButton button) returns bool{
        if(useCustomVirtualKeyboard && hasFocus && VirtualKeyboard(virtualKeyboard).bounds.containsPoint(position)){
            VirtualKeyboard(virtualKeyboard).onMouseDown(position, button)
            return true
        }
        return false
    }

    [public]
	method onMouseUpAny(Point position, MouseButton button) returns bool{
        if(useCustomVirtualKeyboard && hasFocus && VirtualKeyboard(virtualKeyboard).bounds.containsPoint(position)){
            VirtualKeyboard(virtualKeyboard).onMouseUp(position, button)
            return true
        }
        return false
    }

    [public]
	method onMouseClick(Point clickPosition, MouseButton button){
        hasFocus = true
        // TODO: Move caret to position; does this work?
        var s = ""
        var cachedBounds = bounds // Cache bounds to avoid multiple calculations
        foreach(text as char){
            s += char
            var size = graphics.measure_text_size(s, font)
            if(clickPosition.x < cachedBounds.position.x + size.width){ // TODO: Already count after only half of the last character?
                caret = s.length
                break
            }
        }
    }

    [public]
	method onMouseClickAny(Point position, MouseButton button) returns bool{
        if(useCustomVirtualKeyboard && hasFocus && VirtualKeyboard(virtualKeyboard).bounds.containsPoint(position)){
            VirtualKeyboard(virtualKeyboard).onMouseClick(position, button)
            return true
        }
        return false
    }

    [public]
	method onTouchDownAny(list<TouchPoint> points) returns bool{
        if(useCustomVirtualKeyboard && hasFocus){
            foreach(points as point){
                if(VirtualKeyboard(virtualKeyboard).bounds.containsPoint(point.position)){
                    VirtualKeyboard(virtualKeyboard).onTouchDown(points)
                    return true
                }
            }
            return false
        }
        return false
    }

    [public]
	method onTouchUp(list<TouchPoint> points){
        hasFocus = true
    }

    [public]
	method onTouchUpAny(list<TouchPoint> points) returns bool{
        if(useCustomVirtualKeyboard && hasFocus){
            foreach(points as point){
                if(VirtualKeyboard(virtualKeyboard).bounds.containsPoint(point.position)){
                    VirtualKeyboard(virtualKeyboard).onTouchUp(points)
                    return true
                }
            }
            return false
        }
        return false
    }

    [public]
	method onKeyDown(KeyCode key, bool isShiftDown){
        if(key == KeyCode.left){
            if(caret > 0){
                caret--
                blinkCounter = 0
                blinkState = true
            }
        }elseif(key == KeyCode.right){
            if(caret < text.length){
                caret++
                blinkCounter = 0
                blinkState = true
            }
        }elseif(key == KeyCode.backspace){
            if(caret > 0){
                backspace(1)
            }
        }elseif(key == KeyCode.a || key == KeyCode.b || key == KeyCode.c || key == KeyCode.d || key == KeyCode.e || key == KeyCode.f || key == KeyCode.g || key == KeyCode.h || key == KeyCode.i || key == KeyCode.j || key == KeyCode.k || key == KeyCode.l || key == KeyCode.m || key == KeyCode.n || key == KeyCode.o || key == KeyCode.p || key == KeyCode.q || key == KeyCode.r || key == KeyCode.s || key == KeyCode.t || key == KeyCode.u || key == KeyCode.v || key == KeyCode.w || key == KeyCode.x || key == KeyCode.y || key == KeyCode.z){
            if(isShiftDown){
                insert(string(key).toUpper())
            }else{
                insert(string(key))
            }
        }elseif(key == KeyCode._0 || key == KeyCode._1 || key == KeyCode._2 || key == KeyCode._3 || key == KeyCode._4 || key == KeyCode._5 || key == KeyCode._6 || key == KeyCode._7 || key == KeyCode._8 || key == KeyCode._9){
            if(isShiftDown){
                if(key == KeyCode._1){
                    insert("!")
                }elseif(key == KeyCode._2){
                    insert("@")
                }elseif(key == KeyCode._3){
                    insert("#")
                }elseif(key == KeyCode._4){
                    insert("$")
                }elseif(key == KeyCode._5){
                    insert("%")
                }elseif(key == KeyCode._6){
                    insert("&")
                }elseif(key == KeyCode._7){
                    insert("/")
                }elseif(key == KeyCode._8){
                    insert("(")
                }elseif(key == KeyCode._9){
                    insert(")")
                }elseif(key == KeyCode._0){
                    insert("=")
                }
            }else{
                insert(string(key).after(0))
            }
        }elseif(key == KeyCode.space){
            if(lastKeyWasGraveAccent){
                insert("^")
            }else{
                insert(" ")
            }
        }elseif(key == KeyCode.comma){
            insert(",")
        }elseif(key == KeyCode.period){
            insert(".")
        }elseif(key == KeyCode.right_bracket){ // TODO: Figure out why this is "right_bracket" (it's actuall the plus key)
            if(isShiftDown){
                insert("*")
            }else{
                insert("+")
            }
        }elseif(key == KeyCode.slash){ // TODO: Figure out why this is "slash" (it's actuall the minus key)
            if(isShiftDown){
                insert("_")
            }else{
                insert("-")
            }
        }elseif(key == KeyCode.enter){
            hasFocus = false
        }
        lastKeyWasGraveAccent = key == KeyCode.grave_accent
        // TODO: Support more keys
    }

}